package gg.valed.cef.listener;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import org.bukkit.plugin.Plugin;

import java.util.Stack;

public class AutoCompleteListener extends PacketAdapter {

    public AutoCompleteListener(Plugin plugin) {
        super(plugin, ListenerPriority.LOWEST, PacketType.Play.Client.TAB_COMPLETE);
    }

    @Override
    public void onPacketReceiving(PacketEvent event) {
        final String sentence = event.getPacket().getStrings().read(0);

        if (sentence.length() >= 256) {
            event.setCancelled(true);
            return;
        }

        for (String word : sentence.split(" ")) {
            if (hasImbalance(word)) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @Override
    public void onPacketSending(PacketEvent event) {
        // empty because we never send this
    }

    // imbalance = bad
    private boolean hasImbalance(String word) {
        boolean inQuotes = false;
        final Stack<Character> stack = new Stack<>();

        for (char c : word.toCharArray()) {
            if (c == '"') {
                inQuotes = !inQuotes;
                continue;
            }

            // if we're in a string, we shouldn't be counting characters
            if (inQuotes) {
                continue;
            }

            switch (c) {
                case '[', '{' -> stack.push(c);
                case ']' -> {
                    if (!expectStack(stack, '[')) {
                        return true;
                    }
                }
                case '}' -> {
                    if (!expectStack(stack, '}')) {
                        return true;
                    }
                }
            }
        }

        // if we're still in string quotes, this word is imbalanced
        return inQuotes;
    }

    // returns true if expected is found
    private boolean expectStack(Stack<Character> stack, char c) {
        final Character maybeC = stack.pop();
        if (maybeC == null) {
            return false;
        }

        return maybeC == c;
    }

}
